{"name":"Auto-gemsets","tagline":"Automatic, shimless, gemsets. For use with your ruby-version manager of choice.","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","body":"auto-gemsets\r\n==============\r\n\r\nTired of typing `rbenv-rehash`, `rvm gemset use`, and `rvm gemset create` for every project? `auto-gemsets` is for you.\r\n\r\nAny `Gemfile` you encounter will cause auto-gemsets to automatically create and switch to a gemset based on the Gemfile's parent folder. Given a `Gemfile` in a directory named `my-project`, auto-gemsets will create a `~/.gemsets/my-project` directory (if one does not exist), and set all the GEM environment variables appropriate to that gemset. This means that you can enjoy sandboxed gem environments without having to micro-manage your GEM environment.\r\n\r\n## Installation\r\n\r\n### Using RubyGems:\r\n\r\n    gem install auto-gemsets\r\n    gemset init\r\n\r\n### Configuration:\r\n\r\nThe `gemset init` command will create a copy of `auto_gemsets.sh` into `/usr/local/share/auto_gemsets` To use auto-gemsets, you will need to source this file in your `~/.bashrc` (`~/.bash_profile` on OSX) or `~/.zshrc` file.\r\n\r\n    source /usr/local/share/auto_gemsets/auto_gemsets.sh\r\n\r\nThat's it, reload your `.bashrc` (`source ~/.bashrc`) or open a new terminal and auto-gemsets will now be managing your ruby gems environment.\r\n\r\nNOTE: If you've already installed `auto-gemsets` you will receive a warning asking you if you wish to overwrite this installation. You may want to do this after updating your `auto-gemsets` version\r\n\r\n### Default Gemset:\r\n\r\nIf you wish to have certain gems available globally no matter what project you're in, you may set a `DEFAULT_GEMSET` variable that points to a gemset directory that will be available no matter what specific project gemset is currently in use. To set a default gemset simply add the `DEFAULT_GEMSET` variable in your `.bashrc` or `.zshrc` file (it must be a valid path):\r\n\r\n    # auto-gemsets\r\n    export DEFAULT_GEMSET=\"$HOME/.gemsets/$USER\"\r\n\r\nauto-gemsets will add this gemset to your `GEM_PATH` and add it's bin directory to your `PATH`. This gemset will always be active. When another gemset is also active, installed gems will automatically belong to that gemset. When _ONLY_ the default gemset is active, installed gems will belong to the default gemset.\r\n\r\n## Command Line\r\n\r\nAlthough auto-gemsets focuses on automatic management of your gemsets, there are times when interaction is necessary. For these occaisions, auto-gemsets comes with a command line application named `gemset`.\r\n\r\nSee the [HELP](https://github.com/daytonn/auto-gemsets/blob/master/HELP.md) file for `gemset`'s Documentation.\r\n\r\n## default-gemset\r\nThe defalt-gemset command is an auto-gems utility to manage gems\r\nin the default* gemset from within other gemsets.\r\n\r\n### Usage:\r\n\r\n    default-gemset (command) [options]\r\n\r\n### Examples:\r\n\r\n    default-gemset install rake\r\n    default-gemset uninstall rake -v=10.0.1\r\n    default-gemset list --local\r\n\r\n`default-gemset` accepts any valid `gem` command, with any valid arguments and options.\r\nIt is simply a pass-through to the `gem` command with the context of the default gemset."}